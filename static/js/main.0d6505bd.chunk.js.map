{"version":3,"sources":["components/Hexagon.js","components/Square.js","components/QuiltSection.js","components/FabricKey.js","components/generateImages.js","components/util.js","App.js","serviceWorker.js","index.js"],"names":["Hexagon","image","idx","fabric","debug","quiltSectionWidth","isEven","Math","floor","css","overflow","position","clipPath","width","height","margin","backgroundRepeat","backgroundImage","backgroundPosition","marginTop","Square","QuiltSection","imageList","quiltSectionHeight","shape","gridTemplateColumns","gridTemplateRows","toLowerCase","gridDetails","className","display","paddingTop","paddingBottom","paddingRight","map","key","FabricKey","counts","hueWidth","padding","backgroundColor","borderRadius","boxShadow","fontWeight","fontSize","Array","keys","notImg","indexOf","color","generateAllImages","notColors","getImageList","newImageList","forEach","data","rowWidth","min","max","touchingSpaces","touchingSpacesHue","slice","val","randImgNum","randImageHue","sameAsLastRow","sameAsLastRowHue","ceil","random","generateRandomImage","push","setImageList","regenerateAllImages","removeImageList","JSON","parse","window","localStorage","getItem","images","setItem","stringify","removeItem","getImageCounts","Subtitle","title","description","FormItem","label","children","App","useState","setImageCounts","setQuiltSectionWidth","setQuiltSectionHeight","setFabric","setShape","updateImageList","useEffect","setDebug","href","value","onChange","event","parseInt","target","num","type","onClick","length","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d6505bd.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Hexagon = ({ image, idx, fabric, debug, quiltSectionWidth }) => {\n  // if even number wide, true.\n  // if not even number wide, make even every other row.\n  const isEven = quiltSectionWidth % 2 === 0 || Math.floor(idx / quiltSectionWidth) % 2 === 0;\n  return (\n    <div\n      css={[\n        {\n          overflow: \"hidden\",\n          position: \"relative\",\n          clipPath: \"polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%)\",\n          width: `calc(125vw / ${quiltSectionWidth})`,\n          height: `calc((8 * (125vw / ${quiltSectionWidth})) / 9)`,\n          margin: 0,\n          backgroundRepeat: \"repeat\",\n          backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\n          backgroundPosition: \"center\",\n        },\n        isEven\n          ? {\n              \"&:nth-of-type(even)\": {\n                marginTop: `calc((8 * 125vw / ${quiltSectionWidth}) / 9 / 2)`,\n              },\n            }\n          : {\n              \"&:nth-of-type(odd)\": {\n                marginTop: `calc((8 * 125vw / ${quiltSectionWidth}) / 9 / 2)`,\n              },\n            },\n      ]}\n    >\n      {debug === true && (\n        <div\n          css={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            css={{\n              width: \"100%\",\n              zIndex: 10,\n              color: \"blue\",\n              fontSize: 24,\n              fontWeight: \"bold\",\n              textAlign: \"center\",\n              backgroundColor: \"rgba(255, 255, 255, 0.6)\",\n            }}\n          >{`${image}`}</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nHexagon.propTypes = {\n  image: PropTypes.number,\n  idx: PropTypes.number,\n  fabric: PropTypes.string,\n  debug: PropTypes.bool,\n  quiltSectionWidth: PropTypes.number,\n};\n\nexport default Hexagon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Square = ({ image, idx, fabric, debug, quiltSectionWidth }) => {\n  return (\n    <div\n      css={[\n        {\n          overflow: \"hidden\",\n          position: \"relative\",\n          clipPath: \"polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)\",\n          width: `calc(94vw / ${quiltSectionWidth})`,\n          height: `calc(94vw / ${quiltSectionWidth})`,\n          margin: 0,\n          backgroundRepeat: \"repeat\",\n          backgroundImage: `url(./images/${fabric}/${fabric}${image}.jpg)`,\n          backgroundPosition: \"center\",\n        },\n      ]}\n    >\n      {debug === true && (\n        <div\n          css={{\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <div\n            css={{\n              width: \"100%\",\n              zIndex: 10,\n              color: \"blue\",\n              fontSize: 24,\n              fontWeight: \"bold\",\n              textAlign: \"center\",\n              backgroundColor: \"rgba(255, 255, 255, 0.6)\",\n            }}\n          >{`${image}`}</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nSquare.propTypes = {\n  image: PropTypes.number,\n  idx: PropTypes.number,\n  fabric: PropTypes.string,\n  debug: PropTypes.bool,\n  quiltSectionWidth: PropTypes.number,\n};\n\nexport default Square;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Hexagon from \"./Hexagon\";\nimport Square from \"./Square\";\n\nconst QuiltSection = ({ imageList, quiltSectionWidth, quiltSectionHeight, fabric, debug, shape }) => {\n  const gridDetails = shape => {\n    let gridTemplateColumns = `repeat(${quiltSectionWidth}, calc(94vw / ${quiltSectionWidth} ))`;\n    let gridTemplateRows = `repeat(${quiltSectionHeight}, calc(8 * (125vw / ${quiltSectionWidth}) / 9))`;\n\n    switch (shape.toLowerCase()) {\n      case \"square\":\n        gridTemplateRows = `repeat(${quiltSectionHeight}, calc(94vw / ${quiltSectionWidth} ))`;\n        break;\n      default:\n        gridTemplateColumns = `repeat(${quiltSectionWidth}, calc(94vw / ${quiltSectionWidth} ))`;\n        gridTemplateRows = `repeat(${quiltSectionHeight}, calc(8 * (125vw / ${quiltSectionWidth}) / 9))`;\n    }\n\n    return { gridTemplateColumns, gridTemplateRows };\n  };\n\n  const { gridTemplateColumns, gridTemplateRows } = gridDetails(shape);\n\n  return (\n    <div\n      className=\"Quilt\"\n      css={{\n        width: \"94vw\",\n        display: \"grid\",\n        gridTemplateColumns: gridTemplateColumns,\n        gridTemplateRows: gridTemplateRows,\n        margin: \"20px auto\",\n        paddingTop: 20,\n        paddingBottom: 20,\n        paddingRight: 30,\n      }}\n    >\n      {imageList.map((image, idx) => {\n        if (shape === \"Hexagon\")\n          return (\n            <Hexagon\n              key={`hexi-key-${image}-${idx}`}\n              quiltSectionWidth={quiltSectionWidth}\n              quiltSectionHeight={quiltSectionHeight}\n              idx={idx}\n              image={image}\n              debug={debug}\n              fabric={fabric}\n            />\n          );\n        else\n          return (\n            <Square\n              key={`square-key-${image}-${idx}`}\n              quiltSectionWidth={quiltSectionWidth}\n              quiltSectionHeight={quiltSectionHeight}\n              idx={idx}\n              image={image}\n              debug={debug}\n              fabric={fabric}\n            />\n          );\n      })}\n    </div>\n  );\n};\n\nQuiltSection.propTypes = {\n  setCounts: PropTypes.func,\n  hueWidth: PropTypes.number,\n  quiltSectionWidth: PropTypes.number,\n  quiltSectionHeight: PropTypes.number,\n  fabric: PropTypes.string,\n  debug: PropTypes.bool,\n  shape: PropTypes.string,\n};\n\nexport default QuiltSection;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FabricKey = ({ counts, hueWidth, fabric }) => {\n  const width = hueWidth * 120;\n\n  return (\n    <aside\n      css={{\n        margin: \"auto\",\n        padding: \"1px 20px 20px 20px\",\n        width: width,\n        backgroundColor: \"#fff\",\n        borderRadius: \"5px\",\n        boxShadow: \"4px 4px 8px rgba(0, 0, 0, 0.3)\",\n      }}\n    >\n      <h2>Color Key</h2>\n\n      <div\n        css={{\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(5, 120px)\",\n          width: width,\n          fontWeight: \"bold\",\n          fontSize: 24,\n        }}\n      >\n        {[...Array(5).keys()].map((image, idx) => {\n          return (\n            <div\n              key={`Hue-${(idx + 1) % hueWidth}`}\n              css={{ borderBottom: \"1px solid grey\", marginBottom: 10, paddingBottom: 10 }}\n            >{`Hue: ${(idx + 1) % hueWidth}`}</div>\n          );\n        })}\n      </div>\n\n      <div css={{ display: \"grid\", gridTemplateColumns: \"repeat(5, 1fr)\" }}>\n        {[...Array(26).keys()].map((image, idx) => {\n          const notImg = [25].indexOf(idx + 1) !== -1;\n\n          return (\n            <div css={{ marginBottom: 6 }} key={`Image-${idx + 1}`}>\n              {!notImg && (\n                <div\n                  css={{\n                    fontWeight: \"bold\",\n                    fontSize: 16,\n                    textShadow: \"0px 0px 2px white\",\n                  }}\n                >\n                  <span>{`#${idx + 1}: `}</span>\n                  <span css={{ color: (counts[idx + 1] < 4 || counts[idx + 1] > 6) && \"red\" }}>{`${counts[idx + 1] ||\n                    0} Hexis`}</span>\n                </div>\n              )}\n              <div\n                key={`orig-image-order-${idx + 1}`}\n                css={{\n                  width: 120,\n                  height: 50,\n                  backgroundRepeat: \"no-repeat\",\n                  backgroundImage: `url(./images/${fabric}/${fabric}${idx + 1}.jpg)`,\n                  backgroundPosition: \"center\",\n                }}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </aside>\n  );\n};\n\nFabricKey.propTypes = {\n  counts: PropTypes.object,\n  hueWidth: PropTypes.number,\n  fabric: PropTypes.string,\n};\n\nexport default FabricKey;\n","import getRandomInt from \"./util\";\n\n/**\n * Generates a single random image for generateAllImages()\n *\n * @param {int} idx\n * @param {int} rowWidth\n * @param {int} hueWidth\n * @param {array} notColors\n *\n * @returns {int}\n */\nconst generateRandomImage = ({ idx, rowWidth, hueWidth, notColors }) => {\n  let imageList = getImageList();\n\n  // get 3 hexis touching top of current hexi\n  const touchingSpaces = [\n    imageList[idx - rowWidth - 1],\n    imageList[idx - rowWidth],\n    imageList[idx - rowWidth + 1],\n    imageList[idx - 1],\n    imageList[idx - 2],\n  ];\n\n  // Assuming 5 hues (the minimum allowed), making sure that all 5 previous spaces\n  // aren't the same as the current one is impossible and results in an unending loop\n  const hueList = touchingSpaces.slice(0, -1); // slicing in place can break things if not done carefully.\n  const touchingSpacesHue = hueList.map(val => val % hueWidth);\n\n  // Set default random values\n  let randImgNum = 1;\n  let randImageHue = randImgNum % hueWidth;\n  let sameAsLastRow = true;\n  let sameAsLastRowHue = true;\n\n  do {\n    // Get random values\n    randImgNum = getRandomInt(1, 27);\n    randImageHue = randImgNum % hueWidth;\n\n    // set params for easier \"while\" use\n    sameAsLastRow = touchingSpaces.indexOf(randImgNum) > -1;\n    sameAsLastRowHue = touchingSpacesHue.indexOf(randImageHue) > -1;\n  } while (notColors.indexOf(randImgNum) > -1 || sameAsLastRow || sameAsLastRowHue);\n  return randImgNum;\n};\n\n/**\n * Generates all the images for the quilt at once based on either localStorage, or pulling random images from generateRandomImage()\n *\n * @param {int} hueWidth\n * @param {int} quiltSectionWidth\n * @param {int} quiltSectionHeight\n * @param {array} notColors\n *\n * @returns {array}\n */\nconst generateAllImages = ({ hueWidth, quiltSectionWidth, quiltSectionHeight, notColors }) => {\n  const imageList = getImageList();\n  const newImageList = [];\n\n  [...Array(quiltSectionWidth * quiltSectionHeight).keys()].forEach(idx => {\n    const data = { idx, rowWidth: quiltSectionWidth, hueWidth, notColors, imageList };\n    const image = imageList[idx] || generateRandomImage(data);\n    newImageList.push(image);\n    setImageList(newImageList);\n  });\n\n  return newImageList;\n};\n\n/**\n * Empties localStorage, and runs generateAllImages()\n *\n * @param {int} hueWidth\n * @param {int} quiltSectionWidth\n * @param {int} quiltSectionHeight\n * @param {array} notColors\n *\n * @returns {array}\n */\nconst regenerateAllImages = data => {\n  removeImageList();\n  return generateAllImages(data);\n};\n\n/**\n * Returns the imageList from either localStorage, or an empty array\n *\n * @returns {array}\n */\nconst getImageList = () => {\n  const images = JSON.parse(window.localStorage.getItem(\"imageList\"));\n  return images || [];\n};\n\n/**\n * Sets an array of images to localStorage\n *\n * @param {array} images\n */\nconst setImageList = images => {\n  window.localStorage.setItem(\"imageList\", JSON.stringify(images || []));\n};\n\n/**\n * Removes imageList from localStorage\n *\n * @param {array} images\n */\nconst removeImageList = () => {\n  window.localStorage.removeItem(\"imageList\");\n};\n\n/**\n * @returns {object} object of counts for key\n */\nconst getImageCounts = () => {\n  const imageList = getImageList();\n  let counts = {};\n\n  imageList.forEach(val => {\n    counts[val] = counts[val] + 1 || 1;\n  });\n\n  return counts;\n};\n\nexport { generateRandomImage, generateAllImages, getImageList, regenerateAllImages, getImageCounts };\n","export default function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport QuiltSection from \"./components/QuiltSection\";\nimport FabricKey from \"./components/FabricKey\";\nimport { regenerateAllImages, generateAllImages, getImageCounts } from \"./components/generateImages\";\n\nconst Subtitle = ({ title, description }) => (\n  <p\n    css={{\n      margin: 10,\n      padding: 0,\n      fontSize: \"1.2rem\",\n    }}\n  >\n    <span css={{ fontWeight: \"bold\" }}>{title}</span> {description}\n  </p>\n);\n\nconst FormItem = ({ label, children }) => {\n  return (\n    <label\n      css={{\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        alignItems: \"center\",\n        marginTop: 10,\n        marginBottom: 10,\n      }}\n    >\n      <p css={{ margin: 0, padding: 0, width: 200, textAlign: \"right\" }}>{label}</p>\n      {children}\n    </label>\n  );\n};\n\nfunction App() {\n  // Find out number of instances\n  const [counts, setImageCounts] = useState(getImageCounts());\n  const hueWidth = 5;\n  const [quiltSectionWidth, setQuiltSectionWidth] = useState(18);\n  const [quiltSectionHeight, setQuiltSectionHeight] = useState(7);\n  const [fabric, setFabric] = useState(\"beeCreative\");\n  const [shape, setShape] = useState(\"Hexagon\");\n\n  const [imageList, updateImageList] = useState([]);\n\n  useEffect(() => {\n    updateImageList(generateAllImages({ hueWidth, quiltSectionWidth, quiltSectionHeight, notColors: [25] }));\n  }, [quiltSectionWidth, quiltSectionHeight]);\n\n  const [debug, setDebug] = useState(false);\n\n  return (\n    <main className=\"App\">\n      <header\n        css={{\n          margin: \"20px auto\",\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          alignItems: \"center\",\n          width: \"94vw\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        <div>\n          <h1>Quilt Fabric Randomizer</h1>\n          <div>\n            <Subtitle\n              title=\"Website:\"\n              description={\n                <a href=\"https://knitcodemonkey.github.io/hexagon-quilt-map/\">\n                  https://knitcodemonkey.github.io/hexagon-quilt-map/\n                </a>\n              }\n            />\n            <Subtitle\n              title=\"Github:\"\n              description={\n                <a href=\"https://github.com/knitcodemonkey/hexagon-quilt-map\">\n                  https://github.com/knitcodemonkey/hexagon-quilt-map\n                </a>\n              }\n            />\n          </div>\n        </div>\n\n        <form css={{ minWidth: 500 }}>\n          <FormItem label=\"Generated Width:\">\n            <select\n              value={quiltSectionWidth}\n              onChange={event => {\n                setQuiltSectionWidth(parseInt(event.target.value));\n              }}\n            >\n              {[...Array(30).keys()].map(num => {\n                return (\n                  <option key={`wide-${num + 1}`} value={num + 1}>\n                    {num + 1}\n                  </option>\n                );\n              })}\n            </select>\n          </FormItem>\n\n          <FormItem label=\"Generated Height:\">\n            <select\n              value={quiltSectionHeight}\n              onChange={event => {\n                setQuiltSectionHeight(parseInt(event.target.value));\n              }}\n            >\n              {[...Array(100).keys()].map(num => {\n                return (\n                  <option key={`tall-${num + 1}`} value={num + 1}>\n                    {num + 1}\n                  </option>\n                );\n              })}\n            </select>\n          </FormItem>\n\n          <FormItem label=\"Fabric:\">\n            <select value={fabric} onChange={event => setFabric(event.target.value)}>\n              <option value={\"beeCreative\"}>\"Bee Creative\" by Deb Strain</option>\n            </select>\n          </FormItem>\n\n          <FormItem label=\"Geometrical Form used:\">\n            <select value={shape} onChange={event => setShape(event.target.value)}>\n              <option value={\"Hexagon\"}>Hexagon</option>\n              <option value={\"Square\"}>Square</option>\n            </select>\n          </FormItem>\n\n          <FormItem label=\"Show Image Number:\">\n            <select value={debug} onChange={() => setDebug(!debug)}>\n              <option value={true}>Yes</option>\n              <option value={false}>No</option>\n            </select>\n          </FormItem>\n\n          <button\n            type=\"button\"\n            onClick={() => {\n              const newImageList = regenerateAllImages({\n                hueWidth,\n                quiltSectionWidth,\n                quiltSectionHeight,\n                notColors: [25],\n              });\n              updateImageList(newImageList);\n\n              setImageCounts(getImageCounts());\n            }}\n          >\n            Randomize Fabric Placement\n          </button>\n        </form>\n      </header>\n\n      <article\n        css={{\n          borderTop: \"1px solid rgba(0, 0, 0, 0.3)\",\n          borderBottom: \"1px solid rgba(0, 0, 0, 0.3)\",\n          paddingBottom: \"56px\",\n          margin: \"0 auto\",\n        }}\n      >\n        <QuiltSection\n          key={`QuiltSection-${imageList.length}`}\n          hueWidth={hueWidth}\n          quiltSectionWidth={quiltSectionWidth}\n          quiltSectionHeight={quiltSectionHeight}\n          debug={debug}\n          fabric={fabric}\n          shape={shape}\n          imageList={imageList}\n        />\n      </article>\n\n      <footer\n        css={{\n          marginTop: 40,\n          marginBottom: 40,\n        }}\n      >\n        <FabricKey counts={counts} hueWidth={hueWidth} fabric={fabric} />\n      </footer>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}